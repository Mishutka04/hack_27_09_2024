import requests
import json
from difflib import SequenceMatcher

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å—Ç—Ä–æ–∫ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º SequenceMatcher
def compare_strings(expected, actual):
    return SequenceMatcher(None, expected, actual).ratio()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–æ–≤
def calculate_accuracy(expected_answer, actual_answer, expected_class_1, actual_class_1, expected_class_2, actual_class_2):
    answer_accuracy = compare_strings(expected_answer, actual_answer)
    class_1_accuracy = compare_strings(expected_class_1, actual_class_1)
    class_2_accuracy = compare_strings(expected_class_2, actual_class_2)

    return answer_accuracy, class_1_accuracy, class_2_accuracy

# URL –∫–æ–Ω–µ—á–Ω–æ–π —Ç–æ—á–∫–∏ API
# api_url = "http://127.0.0.1:8000/api/model/"
api_url = "http://192.144.12.86:8000/api/model/"

# –ó–∞–≥—Ä—É–∑–∫–∞ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞
with open('./rutube_site/chat_bot/data.json', 'r', encoding='utf-8') as file:
    test_data = json.load(file)

# –î–ª—è –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
results = []

# –¶–∏–∫–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤
for item in test_data:
    question = item['question']
    expected_answer = item['answer']
    expected_class_1 = item['class_1']
    expected_class_2 = item['class_2']

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    request_data = {"question": question}
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω–µ—á–Ω—É—é —Ç–æ—á–∫—É API
        response = requests.post(api_url, json=request_data)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞
        if response.status_code == 200:
            response_data = response.json()

            actual_answer = response_data.get('answer', "")
            actual_class_1 = response_data.get('class_1', "")
            actual_class_2 = response_data.get('class_2', "")

            # –í—ã—á–∏—Å–ª—è–µ–º —Ç–æ—á–Ω–æ—Å—Ç—å –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∏ –∫–ª–∞—Å—Å–æ–≤
            answer_accuracy, class_1_accuracy, class_2_accuracy = calculate_accuracy(
                expected_answer, actual_answer, expected_class_1, actual_class_1, expected_class_2, actual_class_2
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            results.append({
                "question": question,
                "expected_answer": expected_answer,
                "actual_answer": actual_answer,
                "answer_accuracy": answer_accuracy,
                "expected_class_1": expected_class_1,
                "actual_class_1": actual_class_1,
                "class_1_accuracy": class_1_accuracy,
                "expected_class_2": expected_class_2,
                "actual_class_2": actual_class_2,
                "class_2_accuracy": class_2_accuracy
            })

        else:
            # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–µ –±—ã–ª —É—Å–ø–µ—à–Ω—ã–º, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—à–∏–±–∫–∏
            results.append({
                "question": question,
                "error": f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞. –ö–æ–¥: {response.status_code}, –°–æ–æ–±—â–µ–Ω–∏–µ: {response.text}"
            })
    
    except requests.exceptions.RequestException as e:
        # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏
        results.append({
            "question": question,
            "error": f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {str(e)}"
        })

# –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
for result in results:
    if "error" in result:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ '{result['question']}': {result['error']}")
    else:
        print(f"üîç –í–æ–ø—Ä–æ—Å: {result['question']}")
        print(f"–û–∂–∏–¥–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç: {result['expected_answer']}")
        print(f"–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç: {result['actual_answer']}")
        print(f"–¢–æ—á–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞: {result['answer_accuracy']:.2f}")
        print(f"–û–∂–∏–¥–∞–µ–º—ã–π –∫–ª–∞—Å—Å 1: {result['expected_class_1']} -> –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π: {result['actual_class_1']} (–¢–æ—á–Ω–æ—Å—Ç—å: {result['class_1_accuracy']:.2f})")
        print(f"–û–∂–∏–¥–∞–µ–º—ã–π –∫–ª–∞—Å—Å 2: {result['expected_class_2']} -> –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π: {result['actual_class_2']} (–¢–æ—á–Ω–æ—Å—Ç—å: {result['class_2_accuracy']:.2f})")
        print("")

# –°—É–º–º–∏—Ä—É–µ–º –æ–±—â—É—é —Ç–æ—á–Ω–æ—Å—Ç—å –ø–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º
total_accuracy = sum([r['answer_accuracy'] for r in results if "error" not in r]) / len([r for r in results if "error" not in r])
print(f"–û–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤: {total_accuracy:.2f}")


# ssh user1@192.144.12.86
# qwerty12
# source venv/bin/activate
# python ./rutube_site/manage.py runserver 0.0.0.0:8000

# 1 - hack_27_09_msk/rutube_site/chat_bot/test_api.py –Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å api_url = "http://192.144.12.86:8000/api/model/"
# 2 - –Ω—É –∏  –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞—Ç—å "question"  –≤ —ç—Ç–æ–º —Ñ–∞–π–ª–µ. hack_27_09_msk/rutube_site/chat_bot/test_data.json
# 3 - –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç—ã —á–∞—Ç–±–æ—Ç–∞ rutube_site/tg_bot/bot.py
# 4 - –ø—Ä–µ–∑–∞
# 5 - —Å–∫—Ä–∏–Ω–∫–∞—Å—Ç
# 6 - –µ—Å–ª–∏ —á—Ç–æ —Ç–æ –∑–∞–±—ã–ª –¥–æ–ø–∏—à–∏—Ç–µ