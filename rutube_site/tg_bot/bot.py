import os
import sys
import django
import random
import requests
import warnings
warnings.filterwarnings('ignore')
from collections import defaultdict
import requests
import aiohttp
from aiohttp.client_exceptions import ClientConnectorError
import json
from asgiref.sync import sync_to_async

import pandas as pd
from env import API_TOKEN, TOKEN_TRANSFORMRS_API

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –ø—Ä–æ–µ–∫—Ç–æ–º
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

# –ó–∞–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'rutube_app.settings')

django.setup()

import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram import F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from sentence_transformers import SentenceTransformer
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.preprocessing import normalize
from gradio_client import Client
from chat_bot.models import QueryAnswer
from pydub import AudioSegment

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏
base_dir = os.path.dirname(os.path.abspath(__file__))

# –ü–æ–¥–Ω–∏–º–∞–µ–º—Å—è –Ω–∞ –æ–¥–∏–Ω —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ
parent_dir = os.path.dirname(base_dir)
print(parent_dir)
model_path = os.path.join(parent_dir, "tg_bot", "models")
os.makedirs(model_path, exist_ok=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
model = SentenceTransformer(model_path)

# # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
faq_data = QueryAnswer.objects.all()
faq_data_dict = {item.query: item.answer for item in faq_data}

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
titles = [item.query for item in faq_data]
print("–î–ª–∏–Ω–∞ titles", len(titles))

print("–°–æ–∑–¥–∞—ë–º –∏ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —ç–º–±–µ–Ω–¥–∏–Ω–≥–∏")
title_embeddings = model.encode(titles)
title_embeddings = normalize(title_embeddings)
print("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
def find_best_match(query: str):
    similarity_threshold = 0.6  # –ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å—Ö–æ–¥—Å—Ç–≤–∞
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —ç–º–±–µ–¥–¥–∏–Ω–≥
    user_query_embedding = model.encode([query])
    user_query_embedding = normalize(user_query_embedding)

    # –ü–æ–∏—Å–∫ –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    title_similarity_scores = cosine_similarity(user_query_embedding, title_embeddings)
    # print(title_similarity_scores)
    best_title_idx = title_similarity_scores.argmax()
    if title_similarity_scores[0][best_title_idx] < similarity_threshold:
        print("–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å—Ö–æ–¥—Å—Ç–≤–æ —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–æ–µ.")
        return None, None
    

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    best_match_title = titles[best_title_idx]
    best_match_content = faq_data_dict.get(best_match_title, None)
    
    return best_match_title, best_match_content


async def generate_detailed_response(query: str, best_match_content: str, best_match_title: str):
    url = "http://localhost:11434/api/generate"
    headers = {"Content-Type": "application/json"}
    data = {
        "model": "llama3:8b",
        "prompt": f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å: '{query}'. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏: | –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ - {best_match_content} –∏ –ó–∞–≥–æ–ª–æ–≤–æ–∫ - {best_match_title}."
    }

    full_response = ""  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞

    async with aiohttp.ClientSession() as session:
        async with session.post(url, headers=headers, json=data) as response:
            if response.status == 200:
                # –ß—Ç–µ–Ω–∏–µ NDJSON –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
                async for line in response.content:
                    decoded_line = line.decode('utf-8').strip()  # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏ –æ—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫—É
                    if decoded_line:
                        try:
                            # –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É –≤ JSON
                            json_data = json.loads(decoded_line)
                            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –∫ –ø–æ–ª–Ω–æ–º—É –æ—Ç–≤–µ—Ç—É
                            full_response += json_data.get('response', '')
                            # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω, –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
                            if json_data.get('done', False):
                                break
                        except json.JSONDecodeError:
                            print("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON:", decoded_line)
            else:
                print(f"–û—à–∏–±–∫–∞: {response.status}, {await response.text()}")
                return None

    # print("–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:", full_response)
    return full_response


# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API Hugging Face
headers = {"Authorization": f"Bearer {TOKEN_TRANSFORMRS_API}"}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ –≤ API Whisper —á–µ—Ä–µ–∑ Hugging Face
def query_wisper(data):
    API_URL = "https://api-inference.huggingface.co/models/openai/whisper-large-v3"
    response = requests.post(
        API_URL,
        headers=headers,
        data=data
    )
    # print(response.status_code)
    result = response.json().get('text')
    # print(result)  # –ú–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –ø–æ—Å–ª–µ –æ—Ç–ª–∞–¥–∫–∏
    return result


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(CommandStart())
async def send_welcome(message: Message):
    description = (
        "üëã **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ RUTUBE!**\n\n"
        "–ù–∞—à –≤–∏–¥–µ–æ—Ö–æ—Å—Ç–∏–Ω–≥ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç —Ç—ã—Å—è—á–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–∞—Å–∞—é—â–∏—Ö—Å—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∞—Å–ø–µ–∫—Ç–æ–≤ —Ä–∞–±–æ—Ç—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã. "
        "–°–µ–≥–æ–¥–Ω—è –∫–∞–∂–¥—ã–π –∑–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏, —á—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤.\n\n"
        "–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: **–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫**, –∫–æ—Ç–æ—Ä—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã, "
        "–∏—Å–ø–æ–ª—å–∑—É—è –Ω–∞—à—É –æ–±—à–∏—Ä–Ω—É—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π. –≠—Ç–æ—Ç –±–æ—Ç –Ω–µ —Ç–æ–ª—å–∫–æ —É—Å–∫–æ—Ä—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤, –Ω–æ –∏ –ø–æ–≤—ã—à–∞–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤, "
        "–ø–æ–∑–≤–æ–ª—è—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–æ–ª—É—á–∞—Ç—å –ø–æ–º–æ—â—å –±—ã—Å—Ç—Ä–µ–µ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ.\n\n"
        "üîπ **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞**:\n"
        "- –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤\n"
        "- –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –±–æ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–µ—Ç –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤ —Ç–µ–∫—Å—Ç\n"
        "- –¢–æ—á–Ω—ã–µ –∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π\n"
        "- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è\n\n"
        "üì≤ **–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç**:\n"
        "- –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º ‚Äî –±–æ—Ç –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –Ω–µ–≥–æ, –∏—Å–ø–æ–ª—å–∑—É—è —Å–≤–æ—é –±–∞–∑—É –∑–Ω–∞–Ω–∏–π.\n"
        "- –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –±–æ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ä–µ—á—å –≤ —Ç–µ–∫—Å—Ç, –∞ –∑–∞—Ç–µ–º –æ—Ç–≤–µ—Ç–∏—Ç —Ç–∞–∫ –∂–µ –±—ã—Å—Ç—Ä–æ –∏ —Ç–æ—á–Ω–æ, –∫–∞–∫ –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.\n\n"
        "–ù–∞—á–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å ‚Äî –∑–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –±—É–¥—å —Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –ø–æ–ª—É—á–∏—Ç–µ –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç!"
    )

    await message.answer(description, parse_mode='Markdown')


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(F.voice)
async def handle_voice_message(message: Message):
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ bot.get_file()
    voice_file_info = await bot.get_file(message.voice.file_id)
    
    # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    file_path = f"voice_{message.message_id}.ogg"
    await bot.download_file(voice_file_info.file_path, destination=file_path)

    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º ogg –≤ wav –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ API Whisper
    sound = AudioSegment.from_ogg(file_path)
    wav_path = f"voice_{message.message_id}.wav"
    sound.export(wav_path, format="wav")

    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –≤ API
    with open(wav_path, 'rb') as audio_file:
        audio_data = audio_file.read()

    try:
        # –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ API Whisper
        query = query_wisper(audio_data)

        if query:
            await message.answer(f"üì¢ –†–∞—Å–ø–æ–∑–Ω–∞–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å: *{query}*", parse_mode="Markdown")

            # –ü–µ—Ä–µ–¥–∞–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
            await process_text_query(message, query)
        else:
            await message.answer("üõë –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    
    except Exception as e:
        await message.answer(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Å–µ—Ä–≤–∏—Å—É —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    os.remove(file_path)
    os.remove(wav_path)


# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ (–≤ —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
user_states = {}
user_questions = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ö–æ–¥–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –≥–æ–ª–æ—Å–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è)
async def process_text_query(message: Message, query: str):
    # –ü–æ–∏—Å–∫ –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –æ—Ç–≤–µ—Ç–∞
    best_match_title, best_match_content = find_best_match(query)
    # print(best_match_content)
    classes = await sync_to_async(QueryAnswer.objects.filter(answer=best_match_content).first)()
    # return Response({'answer': best_match_content, 'class_1':classes.class_1, 'class_2':classes.class_2})

    if best_match_content:
        best_match_content = (
            f"**–û—Ç–≤–µ—Ç –∏–∑ –ë–ó:** `{best_match_content}`\n"
            f"**–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä 1 —É—Ä–æ–≤–Ω—è:** `{classes.class_1}`\n"
            f"**–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä 2 —É—Ä–æ–≤–Ω—è:** `{classes.class_2}`\n"
        )
        # –°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Å –ø–æ—è—Å–Ω–µ–Ω–∏–µ–º
        quick_response_templates = [
            "üí° *–ë—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å*:\n\n{content}",
            "üîç *–í–æ—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å*:\n\n{content}",
            "üìã *–í–æ—Ç, —á—Ç–æ —è –Ω–∞—à–µ–ª –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π*:\n\n{content}",
            "ü§î *–ü–µ—Ä–≤–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å*:\n\n{content}",
        ]

        # –§–æ—Ä–º–∏—Ä—É–µ–º –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
        quick_response = random.choice(quick_response_templates).format(content=best_match_content)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(quick_response, parse_mode="Markdown")
        
        try:
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞
            detailed_response = await generate_detailed_response(query, best_match_content, best_match_title)
        except ClientConnectorError:
            detailed_response = "LLAMA 3 –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ –Ω–µ –±—ã–ª–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–¥–Ω–µ–µ."

        # –°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Å –ø–æ—è—Å–Ω–µ–Ω–∏–µ–º
        detailed_response_templates = [
            "üí° *–í–æ—Ç –±–æ–ª–µ–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –≤–∞—Å*:\n\n{response}",
            "üîç *–î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏*:\n\n{response}",
            "üìã *–ü–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å*:\n\n{response}",
            "üìù *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–≤–µ–¥–µ–Ω–∏—è –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É*:\n\n{response}",
        ]

        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–ª—É—á–∞–π–Ω–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
        detailed_response_text = random.choice(detailed_response_templates).format(response=detailed_response)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(detailed_response_text, parse_mode="Markdown")

        # –°–ø—Ä–æ—Å–∏–º, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏–ª –ª–∏ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.answer("–í–∞—Å —É—Å—Ç—Ä–æ–∏–ª –æ—Ç–≤–µ—Ç?", reply_markup=yes_no_keyboard())
        
        # –°–æ—Ö—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
        user_states[message.from_user.id] = "waiting_feedback"
        user_questions[message.from_user.id] = query  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å

    else:
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ—Ç–≤–µ—Ç–∞
        no_answer = "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª –æ—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ-–¥—Ä—É–≥–æ–º—É."
        await message.answer(no_answer)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
async def save_question_for_operator(user_id: int, question: str):
    # –õ–æ–≥–∏–∫–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ SQL, MongoDB –∏–ª–∏ –¥—Ä—É–≥–æ–π —Å–∏—Å—Ç–µ–º–µ
    print(f"–í–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id} —Å–æ—Ö—Ä–∞–Ω—ë–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º: '{question}'")

    # –ü—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥–∏ (–∏–ª–∏ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö)
    # with db_connection.cursor() as cursor:
    #     cursor.execute(
    #         "INSERT INTO rejected_questions (user_id, question, status) VALUES (%s, %s, %s)",
    #         (user_id, question, "pending")
    #     )
    # db_connection.commit()


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
class FeedbackForm(StatesGroup):
    waiting_for_contact_info = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —ç—Ç–∞–ø–æ–≤
user_states = {}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ü–µ–Ω–∫–∏ –æ—Ç–≤–µ—Ç–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º ("–î–∞" –∏–ª–∏ "–ù–µ—Ç")
@dp.message(lambda message: message.text in ["–î–∞", "–ù–µ—Ç"])
async def handle_feedback(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    if user_states.get(user_id) == "waiting_feedback":
        if message.text == "–î–∞":
            # –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–æ–≥–ª–∞—Å–∏–ª—Å—è, —á—Ç–æ –æ—Ç–≤–µ—Ç –≤–µ—Ä–Ω—ã–π. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –û—Ç–≤–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –∫–æ–Ω–µ—á–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            # –ù–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            user_states[user_id] = None
            await state.clear()
            await message.answer("üîÑ –ö–∞–∫ –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º?", reply_markup=types.ReplyKeyboardRemove())

        # elif message.text == "–ù–µ—Ç":
        #     # –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å—á–∏—Ç–∞–µ—Ç, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ—Ä–∞–±–æ—Ç–∫—É
        #     await message.answer("‚ö†Ô∏è –û—Ç–≤–µ—Ç –ø—Ä–∏–∑–Ω–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–º. –ö–∞–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å?")
            
        #     # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —É–∫–∞–∑–∞–Ω–∏—è –Ω–∞ –æ—à–∏–±–∫–∏
        #     await state.set_state(FeedbackForm.waiting_for_contact_info)
        elif message.text == "–ù–µ—Ç":
            # –°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å—á–∏—Ç–∞–µ—Ç, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π, –≤—ã–≤–æ–¥–∏–º –∏—Å—Ö–æ–¥–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            question = user_questions.get(user_id, "–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await message.answer(f"‚ö†Ô∏è –û—Ç–≤–µ—Ç –ø—Ä–∏–∑–Ω–∞–Ω –Ω–µ–≤–µ—Ä–Ω—ã–º. –í–æ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –∑–∞–Ω–æ–≤–æ: '{question}'")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
            await save_question_for_operator(user_id, question)
            await message.answer("‚ùó –í–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É –æ–ø–µ—Ä–∞—Ç–æ—Ä—É.")

            # –õ–æ–≥–∏–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
            user_states[user_id] = None
            await state.clear()


# # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –Ω–µ–≤–µ—Ä–Ω–æ–º –æ—Ç–≤–µ—Ç–µ
# @dp.message(FeedbackForm.waiting_for_contact_info)
# async def process_incorrect_info(message: types.Message, state: FSMContext):
#     incorrect_info = message.text

#     # –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –º–æ–∂–µ—Ç –æ–ø–∏—Å–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É)
#     await message.answer(f"‚ùó –°–ø–∞—Å–∏–±–æ! –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä–µ–¥–∞–Ω–∞: '{incorrect_info}'. –ú—ã –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∏–º –æ—Ç–≤–µ—Ç.")

#     # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞
    
#     # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –≤–≤–µ–ª –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
#     await state.clear()
#     await message.answer("üîÑ –ö–∞–∫ –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º?", reply_markup=types.ReplyKeyboardRemove())


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
def yes_no_keyboard():
    keyboard = [
        [types.KeyboardButton(text="–î–∞")],
        [types.KeyboardButton(text="–ù–µ—Ç")]
    ]
    return types.ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True
    )


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(F.text)
async def handle_message(message: Message):
    query = message.text
    await process_text_query(message, query)


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():

    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
